name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: interstellar_route_planner
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest requests  # Ensure required dependencies are installed

      - name: Start the API Server in the Background
        run: |
          python main.py &  # Start API in background
          sleep 10  # Give more time for the server to boot up

      - name: Debug API Logs
        run: |
          cat logs/api.log || docker logs $(docker ps -q --filter "name=api")

      - name: Wait for API Server to be Ready
        run: |
          for i in {1..10}; do
            if curl --silent --fail http://localhost:8000/health; then
              echo "✅ API is up!"
              exit 0
            fi
            echo "⏳ Waiting for API to start..."
            sleep 10
          done
          echo "❌ API failed to start!"
          exit 1

      - name: Run tests
        run: pytest tests/test_api.py  # Run API tests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ad4johnson/interstellar-route-planner:v1.${{ github.run_number }}

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensure 'deploy' runs only after 'build' completes

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Kubernetes CLI
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'  # Ensures latest kubectl version

      - name: Configure Kubernetes Context
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 --decode > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml
          kubectl config use-context my-cluster

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f namespace.yaml
          kubectl apply -f postgres-deployment.yaml
          kubectl apply -f postgres-service.yaml
          kubectl apply -f interstellar-service.yaml